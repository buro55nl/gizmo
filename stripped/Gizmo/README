BUILDING

You should be able to build this code by simply loading the GIZMO.INO file into your
Arduino software and pressing COMPILE.  However you will need to modify some Arduino
libraries to get it to compile properly.  Instructions about those libraries and their
modification can be found (along with hardware build instructions) in the manual,
which is located in ../docs/Gizmo.pdf


MODULARITY

Much (but not all) of Gizmo is modular and can be removed or added as you like.  The 
file All.h contains the modules in question, plus two defines (__MEGA__) and (__UNO__)
which define the standard modules for the Arduino Mega and Arduino Uno.  Note that if you
change the applications or options in the Mega or the Uno, you will also probably need
to change certain arrays in TopLevel.cpp which define the menus which lead to those
applications or options (search for "__MEGA__" or "__Uno__" in TopLevel.cpp)

If you define a new kind of board, you'll need to make your own definition in All.h.
Note how __MEGA__ and __UNO__ are defined in terms of the processor, so if your board
uses the same processor you may need to redefine them there also.



A FEW CODE NOTES

The code is largely written in C, with a few little C++ features, notably
a few functions which pass by reference (arguments with "&" in front of them).  The
code is presently written so as to cram as many features as possible into an
ARDUINO UNO, which has only 32K of code space, 2K of working RAM, and 1K of Flash.  
Thus there are a lot of little oddities here and there meant to conserve space and/or
speed.  A few examples:

- Division.  Division on the Uno is slow and costly.  Gizmo often uses custom "div"
  functions which are smaller and faster than a general use of the "/" and "%"
  operators.  See Divison.h  Also in some cases I've found that (perhaps due to a bug?)
  gcc appears not to be converting division by a power of two into a simple right shift.
  So Gizmo often uses right shifts rather than divisions to force this.  Perhaps this
  is cargo cult programming, perhaps not.

- Helper functions.  Gizmo has lots of helper functions meant to reduce code redundancy.
  In several cases these helper functions have intentional side effects which you may
  not realize: for example, the doMenuDisplay(...) function [as a random example] expects
  to handle, and clear, the 'entry' flag.  These can be serious gotchas if you've not
  looked them over carefully.

- The state machine.  The state machine is a large case statement located in the go()
  method in TopLevel.cpp.  To compile to a jump table, the cases have to be contiguous
  integers; since the Mega and Uno have different sets of cases, this means different
  integer #defines.  They are NOT presently enums!  Adding a new cases is always fun 
  as you have to move all the #defines down or up by 1.  :-(  Also, in some cases I've 
  inlined the certain functions in the case statement as it makes the code smaller 
  than calling them separately.



THE FILES

The files are in certain categories:

	HARDWARE
	MidiShield.h/cpp	Macros and variables for the SparkFun MIDI Shield
	LEDDisplay.h/cpp	Code to do drawing on the Adafruit 16x8 LED
	DAC.h/cpp		Code to control the DACs


	CORE CODE
	Timing.h/cpp		Internal and external clocks, notes, pulses, beats
	TopLevel.h/cpp		The core.  Contains various important functions, the
				state machine.
	MidiInterface.h/cpp	MIDI callbacks, MIDI wrapper functions
	Utility.h/cpp		Utility functions used by various applications
	Storage.h/cpp		Slot (file) storage in Flash
	Options.h/cpp		Storage of global and application-specific options
	Division.h/cpp		The arduino doesn't have hardware divide.  This
				file contains various functions for dividing by
				specific common constants (10, 12, 100, etc.)
	All.h			One header file to bring them all and in the
				darkness bind them.
	Gizmo.ino		The standard Arduino entry functions


	APPLICATIONS		[Note that many parts of applications are embedded
				in the state machine in TopLevel.cpp, and a few bits
				are located in the MIDI callback functions in
				TopLevel.cpp, though I try to avoid embedding
				in the callback functions when possible.]
	Arpeggiator.h/cpp	The arpeggiator
	StepSequencer.h/cpp	The step sequencer
	Control.h/cpp		The MIDI control surface
	Gauge.h			The MIDI gauge.  There's no Gauge.cpp because it's
				entirely contained within the state machine in
				TopLevel.cpp
	Recorder.h/cpp		The note recorder
	Split.h/cpp		The keyboard splitter / layerer
	Thru.h/cpp		The MIDI thru application
	







MAKING AN APPLICATION

The first step is to create a #define that allows the developer to include (or not) your application in
his package.  Let's say your application is called FOO.  In All.h, add an application define called (say):

// INCLUDE_FOO			// This will include the Foo application

Now let's say that your application is targeting the Arduino Mega.  In All.h there's an area where the
define __MEGA__ turns on various other applications.  In that region, add your own application here:

#define INCLUDE_FOO

The state machine is for the moment just a bunch of #defines located in TopLevel.h.  If you'd like to add
an application, typically you'd add the TOP LEVEL APPLICATION STATE and then add the SUBSIDIARY STATES.
To add the top-level application state, you'll include your unique state (let's call it STATE_FOO).  First
we need to include it as a state.  In the file TopLevel.h, just before the line
	STATE_OPTIONS,
add the following:

#ifdef INCLUDE_FOO
	#define STATE_FOO,
#endif

Now that you have a state, you can add the code for it.  In the file TopLevel.cpp, just before the line
        case STATE_OPTIONS:
add the following:

#ifdef INCLUDE_FOO
        case STATE_FOO:
        	{
        	stateFoo();
        	}
        break;
#endif

This adds a state which, when called, will call the stateFoo() method.  Additional states would typically 
get tacked onto the end of the #define list and be called stuff like STATE_FOO_EDIT or STATE_FOO_WHATEVER.  
The critical item here is that you #defines in TopLevel.h and TopLevel.cpp must be in the same position,
so the switch statement stays contiguous and can remain a jump table.

Now, create a Foo.h and Foo.cpp files, and add Foo.h to All.h as an #include.
 
 Your Foo.h file should look like this:
 
#ifndef __FOO_H__
#define __FOO_H__ 
#ifdef INCLUDE_FOO

void stateFoo();

#endif
#endif


Your Foo.cpp file should look like this:

#include "All.h"
#ifdef INCLUDE_FOO

void stateFoo()
	{
	}

#endif


Now what goes in your function?   First you need to understand some global variables.

state				The current state
entry				Did we just transition to this state?  We have to set/reset this manually.
application 		The last state we transitioned to that was top level application state
defaultState		If we transitioned back up the menu hierarchy to a higher-level state whose
					menu includes us as an option, set this to clud the higher-level state that
					it should first display us (which makes sense to the user).
optionsReturnState	If we transition temporarily to Options to let the user choose something
					from the options menu from within our application, when the user is finished,
					to what state should options transition back
display				If TRUE, it's time to draw on the display
		
In fact, the code below doesn't set any of these variables (except entry = false): it calls a 
helper function which does it for us.  The helper function really exists to save space, that's 
all.  Namely, the function goUpState() combines setting the state, entry, and defaultState in 
one easy package when you want to transition back to a higher-level menu state.
There are other versions, such as goDownState(), which is the same but doesn't set defaultState
(use goUpState() to go to *menu* states *higher* in the menu hierarchy, and goDownState() in other
cases).  There's also versions that do backup saves for options (you'll need to dig around to see
how that would be useful).

Additionally we can test for buttons like this:

	isUpdated(BACK_BUTTON, RELEASED)
or
	isUpdated(SELECT_BUTTON, PRESSED)
or
	isUpdated(MIDDLE_BUTTON, RELEASED_LONG)
	
If you're testing for RELEASED_LONG you shouldn't also test for PRESSED -- instead, test for
RELEASED.  Also, the BACK_BUTTON is *always* tested for RELEASED because RELEASED_LONG is
automatically BYPASS.

Finally, the LEDs are led2 (on the left) and led (on the right).  See LEDDisplay for stuff
you can do with them.	
				
So we might say this for example:


uint8_t fooCounter = 0;
uint8_t fooGo = 0;

void stateFoo()
	{
	if (entry)
		{
		// this is where we initialize stuff
		fooCounter = 0;
		fooGo = 1;
		entry = false;
		}
		
	if (isUpdated(BACK_BUTTON, RELEASED))  // time to exit
		{
		// Change the state so that next iteration we go back to root, which we're under 
		// (we're an application state), and also automatically set defaultState and entry 
		// -- see goUpState in Utility.h if you don't believe me!
		goUpState(STATE_ROOT);
		}
		
	if (isUpdated(SELECT_BUTTON, PRESSED))  // reset counter
		{
		fooCounter = 0;
		}
		
	if (isUpdated(MIDDLE_BUTTON, PRESSED)) // start/stop
		{
		fooGo = !fooGo;
		}
		
	if (updateDisplay)	// this only happens once every 64 steps
		{
		clearScreen();
		writeNumber(led, led2, fooCounter);

		if (fooGo)
			{
			fooCounter++;
			if (fooCounter > 127)
				fooCounter = 0;
			// In TopLevel.h go(), Gizmo will tack on the header and write this out
			}
		}
	}


Notice that I used some global variables.  Instead we might save some memory by including it in the
locals union.  In Foo.h we'd add:

struct _fooLocal
	{
	uint8_t counter;
	uint8_t go;
	}
	
Then in TopLevel.h we modify add the following line to _union local:

    struct _fooLocal foo;

Finally we modify the code to look like this:

void stateFoo()
	{
	if (entry)
		{
		// this is where we initialize stuff
		local.foo.counter = 0;
		local.foo.go = 1;
		entry = false;
		}
		
	if (isUpdated(BACK_BUTTON, RELEASED))  // time to exit
		{
		// Change the state so that next iteration we go back to root, which we're under 
		// (we're an application state), and also automatically set defaultState and entry 
		// -- see goUpState in Utility.h if you don't believe me!
		goUpState(STATE_ROOT);
		}
		
	if (isUpdated(SELECT_BUTTON, PRESSED))  // reset counter
		{
		local.foo.counter = 0;
		}
		
	if (isUpdated(MIDDLE_BUTTON, PRESSED)) // start/stop
		{
		local.foo.go = !local.foo.go;
		}
		
	if (updateDisplay)	// this only happens once every 64 steps
		{
		clearScreen();
		writeNumber(led, led2, local.foo.counter);

		if (local.foo.go)
			{
			local.foo.counter++;
			if (local.foo.counter > 127)
				local.foo.counter = 0;
			// In TopLevel.h go(), Gizmo will tack on the header and write this out
			}
		}
	}



ADDING AN OPTION

Maybe we want go to be an option stored in flash.  We add it to struct _options in Options.h:

	uint8_t fooGo;

Since the default setting is 1, we need to add this to resetOptions() in Options.cpp:

	options.fooGo = 1;
	
Now we need to (1) no longer initialize it on entry and (2) store it in flash when
the user presses the middle button.  So we change our code as:


void stateFoo()
	{
	if (entry)
		{
		// this is where we initialize stuff
		local.foo.counter = 0;
		entry = false;
		}
		
	if (isUpdated(BACK_BUTTON, RELEASED))  // time to exit
		{
		// Change the state so that next iteration we go back to root, which we're under 
		// (we're an application state), and also automatically set defaultState and entry 
		// -- see goUpState in Utility.h if you don't believe me!
		goUpState(STATE_ROOT);
		}
		
	if (isUpdated(SELECT_BUTTON, PRESSED))  // reset counter
		{
		local.foo.counter = 0;
		}
		
	if (isUpdated(MIDDLE_BUTTON, PRESSED)) // start/stop
		{
		options.fooGo = !options.fooGo;
		saveOptions();
		}
		
	if (updateDisplay)	// this only happens once every 64 steps
		{
		clearScreen();
		writeNumber(led, led2, local.foo.counter);

		if (options.fooGo)
			{
			local.foo.counter++;
			if (local.foo.counter > 127)
				local.foo.counter = 0;
			// In TopLevel.h go(), Gizmo will tack on the header and write this out
			}
		}
	}


ADDING MIDI OUTPUT EVERY BEAT

Let's change things so that we update the counter only every beat.  Read Timing.h, and you'll
find you can access the current TIME, TICK, PULSE, BEAT, and NOTE PULSE.

Every beat we'll send the counter out as a note, pushed out to the default MIDI channel.
Note that when we send a NOTE ON, we're using sendNoteOn rather than MIDI.sendNoteOn (the
FortySevenEffects MIDI library).  This is because sendNoteOn filters the note to transpose
it and change its volume, or not send it at all, according to the user's options and bypass
setting.  Other filtered senders include sendPolyPressure, sendNoteOff, sendAllNotesOffDisregardBypass,
and sendAllNotesOff.  For other stuff, just the MIDI.blah(...) version.

void stateFoo()
	{
	if (entry)
		{
		// this is where we initialize stuff
		local.foo.counter = 0;
		entry = false;
		}
		
	if (isUpdated(BACK_BUTTON, RELEASED))  // time to exit
		{
		// Change the state so that next iteration we go back to root, which we're under 
		// (we're an application state), and also automatically set defaultState and entry 
		// -- see goUpState in Utility.h if you don't believe me!
		goUpState(STATE_ROOT);
		}
		
	if (isUpdated(SELECT_BUTTON, PRESSED))  // reset counter
		{
		local.foo.counter = 0;
		}
		
	if (isUpdated(MIDDLE_BUTTON, PRESSED)) // start/stop
		{
		options.fooGo = !options.fooGo;
		saveOptions();
		}
		
	if (updateDisplay)	// this only happens once every 64 steps
		{
		clearScreen();
		writeNumber(led, led2, local.foo.counter);
		}
	
	if (beat)
		{
		// we're not keeping track of the last note we played, so, meh, just send all notes off on all channels
		sendAllNotesOff();
		// note that options.channelOut could be 17 ("OFF"), which the MIDI library will just ignore
		sendNoteOn(local.foo.counter, 127, options.channelOut);
		if (options.fooGo)
			{
			local.foo.counter++;
			if (local.foo.counter > 127)
				local.foo.counter = 0;
			// In TopLevel.h go(), Gizmo will tack on the header and write this out
			}
		}
	}



READING MIDI INPUT

Finally, let's send a note out only if one is being played.  The counter now becomes
the volume rather than the note.

Here's how MIDI reading is done in Gizmo.  Each MIDI message is passed through a HANDLER FUNCTION.
You could add your own code directly to this function -- and a few rare apps have done this --
but more commonly you'll just let it do its thing.  The HANDLER FUNCTION will set the following
variables (for more information, see TopLevel.h):

newItem			Set to NEW_ITEM if we've got a new message
itemType		Set to the item type 
itemNumber		Set to the NOTE if any, or to the CC/RPN/NRPN/PC PARAMETER if any
itemValue		Set to the VELOCITY if any, or to the CC/RPN/NRPN/PC VALUE if any
itemChannel		Set to the incoming item channel

No, they're not good names.

The only MIDI messages registered this way are ones which come in through the default MIDI IN
(options.channelIn), or to all channels if options.channelIn is CHANNEL_OMNI.

So anyway, we might do this:


void stateFoo()
	{
	if (entry)
		{
		// this is where we initialize stuff
		local.foo.counter = 0;
		entry = false;
		}
		
	if (isUpdated(BACK_BUTTON, RELEASED))  // time to exit
		{
		// Change the state so that next iteration we go back to root, which we're under 
		// (we're an application state), and also automatically set defaultState and entry 
		// -- see goUpState in Utility.h if you don't believe me!
		goUpState(STATE_ROOT);
		}
		
	if (isUpdated(SELECT_BUTTON, PRESSED))  // reset counter
		{
		local.foo.counter = 0;
		}
		
	if (isUpdated(MIDDLE_BUTTON, PRESSED)) // start/stop
		{
		options.fooGo = !options.fooGo;
		saveOptions();
		}
		
	if (updateDisplay)	// this only happens once every 64 steps
		{
		clearScreen();
		writeNumber(led, led2, local.foo.counter);
		}
	
	if (beat)
		{
		if (newItem == NEW_ITEM &&
			itemType = MIDI_NOTE_ON)
			{
			// we're not keeping track of the last note we played, so, meh, just send all notes off on all channels
			sendAllNotesOff();
			// note that options.channelOut could be 17 ("OFF"), which the MIDI library will just ignore
			sendNoteOn(itemNumber, local.foo.counter, options.channelOut);
			}
			
		if (options.fooGo)
			{
			local.foo.counter++;
			if (local.foo.counter > 127)
				local.foo.counter = 0;
			// In TopLevel.h go(), Gizmo will tack on the header and write this out
			}
		}
	}

One last item.  You'll notice that a lot of Gizmo's states are MENUs or NUMBER-SETTING or GLYPH-CHOOSING states.
Gizmo provides the following useful functions for you in TopLevel.h:

	doMenuDisplay(...)
	doNumericalDisplay(...)
	doGlyphDisplay(...)

Look around to see how these functions are called.  Note in particular (1) that they handle setting and resetting
entry internally, so don't override them, and (2) doMenuDisplay has TWO modes, one which makes it easy to deal with
menus consisting of consecutive states, and one which just does general menu picking.

In TopLevel.cpp (not exposed to TopLevel.h) is a cover function which handles basic (positive) number selection for you
as an entire state.  It's called stateNumerical(), and is used a lot in TopLevel.cpp to reduce the code size.  It may not
be worth your time complexity-wise, but you might check it out.

Also in Utility.h there are some similar cover functions which handle an entire state for loading files, saving files,
asking if if the user's "sure" (basically a Cancel/Okay panel), and asking the user to enter a note.


DEBUGGING

You can't write out the serial port -- it's being used by MIDI.  So how do you insert debugging statements?  You could
try the debug(...) functions provided in Utility.h, which write messages to the screen and pause.  Note that
because they pause a long time [so you can read it], the timer will race to make up its lost time, so you'll see the screen speeding
up etc. afterwards.

